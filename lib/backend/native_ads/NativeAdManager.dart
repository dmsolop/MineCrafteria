import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import '../AccessKeys.dart';
import '../AdManager.dart';
import '../../backend/LogService.dart';

class NativeAdManager {
  // Singleton —ñ–Ω—Å—Ç–∞–Ω—Å
  static final NativeAdManager _instance = NativeAdManager._internal();
  factory NativeAdManager() => _instance;
  NativeAdManager._internal();

  // üîπ –ü–æ–ª—è –∫–µ—à—É —Ç–∞ —Å—Ç–∞–Ω—É
  final Map<int, NativeAd> _nativeAds = {};
  final Map<int, bool> _adLoadedFlags = {};

  static const int _adFrequency = 5;
  int _lastPreloadedAdIndex = 17; // üîπ 5,11,17 ‚Äî preloaded by default
  static const String _adUnitId = AccessKeys.adUnitId; // üîπ –Ø–∫ —É –ø—Ä–æ–µ–∫—Ç—ñ

  bool isAdLoaded(int index) {
    return _adLoadedFlags[index] == true;
  }

  // üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏: —á–∏ —Ü–µ–π —ñ–Ω–¥–µ–∫—Å ‚Äî —Ä–µ–∫–ª–∞–º–∞
  bool isAdIndex(int index) {
    final result = AdConfig.isAdsEnabled && ((index + 1) % (_adFrequency + 1) == 0);
    LogService.log('isAdIndex: index=$index ‚Üí $result');
    return result;
  }

  // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –º–æ–¥—É (–±–µ–∑ —Ä–µ–∫–ª–∞–º–∏)
  int getRealModIndex(int index) {
    int adsBefore = (index / (_adFrequency + 1)).floor();
    return index - adsBefore;
  }

  // üîπ –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–º–æ–¥–∏ + —Ä–µ–∫–ª–∞–º–∞)
  int getTotalItemCount(int modCount) {
    final total = AdConfig.isAdsEnabled ? modCount + (modCount / _adFrequency).floor() : modCount;
    LogService.log('getTotalItemCount: modCount=$modCount ‚Üí total=$total');
    return total;
  }

  // üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω–∏–π –≤—ñ–¥–∂–µ—Ç (–∫–µ—à –∞–±–æ –∑–∞–≥—Ä—É–∑–∫–∞)
  Widget getAdWidget(int index, {double? height, required VoidCallback refresh}) {
    LogService.log('getAdWidget called with index=$index, adLoaded=${_adLoadedFlags[index] == true}');
    LogService.log('üü° getAdWidget CALLED from=${StackTrace.current}');
    if (!AdConfig.isAdsEnabled) {
      LogService.log('‚ùå Ads disabled. Returning SizedBox for index=$index');
      return const SizedBox.shrink(); // üîπ –†–µ–∫–ª–∞–º–∞ –≤–∏–º–∫–Ω–µ–Ω–∞
    }

    if (_nativeAds[index] == null) {
      if (_nativeAds.containsKey(index)) {
        LogService.log('üü† getAdWidget using existing ad for index=$index');
      } else {
        LogService.log('üü¢ getAdWidget creating new ad for index=$index');
      }
      _nativeAds[index] = NativeAd(
        adUnitId: _adUnitId,
        factoryId: 'customNative',
        customOptions: {
          'containerHeight': height!.toInt(),
        },
        listener: NativeAdListener(
          onAdLoaded: (ad) {
            _adLoadedFlags[index] = true;
            LogService.log('‚úÖ Ad loaded for index=$index ‚Üí triggering refresh()');
            refresh();
          },
          onAdFailedToLoad: (ad, error) {
            ad.dispose();
            LogService.log('‚ùå Ad failed to load for index=$index ‚Üí $error');
          },
        ),
        request: const AdRequest(),
      )..load();
    }

    return _adLoadedFlags[index] == true
        ? Container(
            height: height ?? 300,
            child: AdWidget(ad: _nativeAds[index]!),
          )
        : const SizedBox.shrink();
  }

  // üîπ Pre-load —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤
  void preLoadAd({List<int> indexes = const [5, 11, 17]}) {
    LogService.log('preLoadAd called with indexes: $indexes');
    if (!AdConfig.isAdsEnabled) return; // üîπ –ù–µ –≤–∞–Ω—Ç–∞–∂–∏—Ç–∏, —è–∫—â–æ —Ä–µ–∫–ª–∞–º–∞ –≤–∏–º–∫–Ω–µ–Ω–∞

    for (int index in indexes) {
      if (_nativeAds[index] == null) {
        LogService.log('preLoadAd creating NativeAd for index=$index');
        _nativeAds[index] = NativeAd(
          adUnitId: _adUnitId,
          factoryId: 'customNative',
          listener: NativeAdListener(
            onAdLoaded: (ad) {
              LogService.log('NativeAd loaded for index=$index');
              _adLoadedFlags[index] = true;
            },
            onAdFailedToLoad: (ad, error) {
              ad.dispose();
            },
          ),
          request: const AdRequest(),
        )..load();
      }
    }
  }

  // üîπ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π pre-load –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –≤–∏—Ö–æ–¥—É –∑–∞ –º–µ–∂—ñ
  void maybePreloadAds(int currentIndex, int totalMods) {
    LogService.log('maybePreloadAds at currentIndex=$currentIndex');
    if (!AdConfig.isAdsEnabled) return; // üîπ –ë–µ–∑ —Ä–µ–∫–ª–∞–º–∏ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏

    if (currentIndex >= _lastPreloadedAdIndex - 4) {
      List<int> newIndexes = [];

      for (int i = 1; i <= 3; i++) {
        int nextAdIndex = _lastPreloadedAdIndex + i * 6;
        int maxAllowedAdIndex = getTotalItemCount(totalMods) - 1;
        if (nextAdIndex <= maxAllowedAdIndex) {
          newIndexes.add(nextAdIndex);
        }
      }

      if (newIndexes.isNotEmpty) {
        preLoadAd(indexes: newIndexes);
        _lastPreloadedAdIndex = newIndexes.last;
      }
      LogService.log('maybePreloadAds: newIndexes to load: $newIndexes');
    }
  }

  // üîπ –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ —Ç–∞ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω
  void disposeAllAds() {
    LogService.log('disposeAllAds called. Clearing ${_nativeAds.length} ads.');
    for (var ad in _nativeAds.values) {
      ad.dispose();
    }
    _nativeAds.clear();
    _adLoadedFlags.clear();
    _lastPreloadedAdIndex = 17; // üîπ Reset
  }
}
